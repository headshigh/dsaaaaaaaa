class Solution {

    static int countPaths(int n, List<List<Integer>> roads) {
        // Your code here
               ArrayList<ArrayList<Pair>>adj=new ArrayList<>();
        for(int i=0;i<n;i++){
            adj.add(new ArrayList<Pair>());
        }
        for(int i=0;i<roads.size();i++){
            List<Integer> adjacent=roads.get(i);
            adj.get(adjacent.get(0)).add(new Pair(adjacent.get(1),adjacent.get(2)));
            adj.get(adjacent.get(1)).add(new Pair(adjacent.get(0),adjacent.get(2)));
        }
        int []dist=new int[n];
        for(int i=0;i<n;i++){
            dist[i]=(int)(1e9);
        }
        dist[0]=0;
        int []ways=new int[n];
        for(int i=0;i<n;i++){
            ways[i]=0;
        }
        ways[0]=1;
        PriorityQueue<Pair>pq=new PriorityQueue<Pair>((x,y)->x.distance-y.distance);
        pq.add(new Pair(0,0));
        int mod=(int)(1e9+7);
        while(pq.size()!=0){
            int node=pq.peek().node;
            int distance=pq.peek().distance;//tyo node samma pugna lako time
            pq.poll();
            for(Pair iterator:adj.get(node)){
                if(iterator.distance+distance==dist[iterator.node]){
                    ways[iterator.node]=(ways[iterator.node]+ways[node])%mod;
                }
                else if(iterator.distance+distance<dist[iterator.node] ){
                    dist[iterator.node]=(iterator.distance+distance)%mod;
                    ways[iterator.node]=ways[node];
                    pq.add(new Pair(iterator.node,dist[iterator.node]));
                }
            }
        }
        // System.out.println(dist[n-1]);
        // System.out.println(n-1);
            return ways[n-1]%mod;
    }
}
class Pair{
    int node;
    int distance;
    public Pair(int node,int distance){
        this.node=node;
        this.distance=distance;
    }
}
